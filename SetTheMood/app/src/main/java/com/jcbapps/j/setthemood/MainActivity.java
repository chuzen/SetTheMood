package com.jcbapps.j.setthemood;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.Color;
import android.graphics.PorterDuff;
import android.media.AudioManager;
import android.media.MediaPlayer;
import android.support.v4.view.MenuItemCompat;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.telephony.PhoneStateListener;
import android.telephony.TelephonyManager;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.SearchView;
import android.widget.TextView;
import android.widget.Toast;

import com.jcbapps.j.setthemood.com.jcbapps.j.setthemood.soundcloud.SoundCloud;
import com.jcbapps.j.setthemood.com.jcbapps.j.setthemood.soundcloud.SoundCloudService;
import com.jcbapps.j.setthemood.com.jcbapps.j.setthemood.soundcloud.Track;
import com.squareup.picasso.Picasso;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import retrofit.Callback;
import retrofit.RetrofitError;
import retrofit.client.Response;

/**
 * This is the list of the songs generated by the user's pick of their
 * mood button, they can also go at the search bar at the top of the app
 * and type for their song or artist and it will generate the song list
 * list for them based on their search.
 */

public class MainActivity extends AppCompatActivity
        implements SearchView.OnQueryTextListener {

    // Declare main content variables
    private MediaPlayer mediaPlayer;
    private TracksAdapter tracksAdapter;
    private List<Track> allTracks;
    private List<Track> previousTracks;
    private TextView selectedTitle;
    private ImageView selectedThumbNail;
    private ImageView playerStateButton;
    private Toolbar toolbar;
    private ProgressBar progressBar;
    private SearchView searchView;
    private boolean isFirstRun;

    // Declare incoming call variables
    private PhoneStateListener phoneStateListener;
    private TelephonyManager telephonyManager;

    // Declare the two Headset disconnection variables with the Overriden onReceive method
    private int headsetSwitch = 1;
    private BroadcastReceiver headsetReceiver = new BroadcastReceiver() {
        private boolean headsetConnected = false;

        @Override
        public void onReceive(Context context, Intent intent) {
            if (intent.hasExtra("state")) {
                if (headsetConnected && intent.getIntExtra("state", 0) == 0) {
                    headsetConnected = false;
                    headsetSwitch = 0;
                } else if (!headsetConnected && intent.getIntExtra("state", 0) == 1) {
                    headsetConnected = true;
                    headsetSwitch = 1;
                }
            }
            // Check to see if the headset has been disconnected
            switch (headsetSwitch) {
                case 0:
                    interceptHeadsetDisconnection();
                    break;
                case 1:
                    break;
            }
        }
    };

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        initializeContents();
        initializeSoundCloud();

        // This gets the R string value for the extra mood key from the strings values folder
        // and the extra string mood from the HomeActivity class and calls the searchFor method
        // with the extra string mood to search and display the song list associated with the user's
        // mood that they select.
        final String mood = getIntent().getStringExtra(Integer.toString(R.string.mood_key));
        searchFor(mood);
        interceptIncomingCall();

        // Headset disconnection
        registerReceiver(headsetReceiver, new IntentFilter(
                Intent.ACTION_HEADSET_PLUG));
    }

    /*
        This method initializes the contents to be displayed on the app.
     */

    private void initializeContents() {

        // Mood picked will be displayed inside the action bar
        Intent moodIntent = getIntent();
        String moodPicked = moodIntent.getStringExtra(Integer.toString(R.string.mood_key));
        setTitle(moodPicked + " Mood");

        // This is set so a random song list will generate.
        isFirstRun = true;

        toolbar = (Toolbar) findViewById(R.id.player_toolbar);
        selectedTitle = (TextView) findViewById(R.id.selected_title);
        selectedThumbNail = (ImageView) findViewById(R.id.selected_thumbnail);
        playerStateButton = (ImageView) findViewById(R.id.player_state);
        progressBar = (ProgressBar) findViewById(R.id.player_progress);
        RecyclerView recyclerView = (RecyclerView) findViewById(R.id.songs_list);

        mediaPlayer = new MediaPlayer();

        mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
        mediaPlayer.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {

            @Override
            public void onPrepared(MediaPlayer mp) {
                toggleSongState();
            }
        });
        mediaPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {

            @Override
            public void onCompletion(MediaPlayer mp) {
                playerStateButton.setImageResource(R.mipmap.ic_play);
            }
        });

        playerStateButton.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                toggleSongState();
            }
        });

        progressBar.getIndeterminateDrawable()
                .setColorFilter(Color.WHITE, PorterDuff.Mode.SRC_ATOP);

        recyclerView.setLayoutManager(new LinearLayoutManager(this));

        allTracks = new ArrayList<>();
        tracksAdapter = new TracksAdapter(this, allTracks);
        tracksAdapter.setOnItemClickListener(new AdapterView.OnItemClickListener() {

            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                Track selectedTrack = allTracks.get(position);
                selectedTitle.setText(selectedTrack.getTitle());
                Picasso.with(MainActivity.this).load(selectedTrack.getArtworkURL())
                        .into(selectedThumbNail);

                if (mediaPlayer.isPlaying()) {
                    mediaPlayer.stop();
                }
                mediaPlayer.reset();
                toggleProgressBar();

                toolbar.setVisibility(View.VISIBLE);

                try {
                    mediaPlayer.setDataSource(selectedTrack
                            .getStreamURL() + "?client_id=" + SoundCloudService.CLIENT_ID);
                    mediaPlayer.prepareAsync();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });
        recyclerView.setAdapter(tracksAdapter);
    }

    /*
        This method initializes the SoundCloud feature to stream the list of songs based
        on the user's mood.
     */

    private void initializeSoundCloud() {

        SoundCloudService service = SoundCloud.getService();
        service.getRecentSongs(new SimpleDateFormat("yyyy-MM-dd hh:mm:ss", Locale.US).format(new Date()),
                new Callback<List<Track>>() {
                    @Override
                    public void success(List<Track> tracks, Response response) {
                        if (!isFirstRun) {
                            // This will prevent a randomly generated song list to override over
                            // the user's updated mood song list based on the mood button they clicked.
                            updateTracks(tracks);
                        } else {
                            // This will generate a random song list over the user's mood song list
                            // immediately when they click on their mood button but the HomeActivity
                            // prevents that with the extra string mood key and the string mood implemented.
                            // This boolean isFirstRun will be set to false.
                            isFirstRun = false;
                        }
                    }

                    @Override
                    public void failure(RetrofitError error) {
                        setTitle("Oh no! We can't get your mood!");
                        Toast.makeText(getApplication(), "Internet access required!", Toast.LENGTH_SHORT).show();
                    }
                });
    }

    /*
        These two methods will pause the play button for incoming calls and will only play
        if the user clicks on the play button again.
     */

    private void interceptIncomingCall() {

        // This following code is dealing with the phone-state to
        // detect voice incoming call.
        phoneStateListener = new PhoneStateListener() {
            @Override
            public void onCallStateChanged(int state, String incomingNumber) {
                if (state == TelephonyManager.CALL_STATE_RINGING) {
                    // Do all necessary action to pause the music
                    if (mediaPlayer != null) {
                        setPlayerButton(true, false);
                        if (mediaPlayer.isPlaying()) {
                            mediaPlayer.pause();
                        }
                    }
                }
                super.onCallStateChanged(state, incomingNumber);
            }
        };

        telephonyManager = (TelephonyManager) getSystemService(TELEPHONY_SERVICE);
        if (telephonyManager != null) {
            telephonyManager.listen(phoneStateListener, PhoneStateListener.LISTEN_CALL_STATE);
        }
    }

    private void setPlayerButton(Boolean play, Boolean pause) {
        playerStateButton.setEnabled(play);
        playerStateButton.setImageResource(R.mipmap.ic_play);
        if (play) {
            playerStateButton.setEnabled(true);
            playerStateButton.setImageResource(R.mipmap.ic_play);
        } else {
            playerStateButton.setEnabled(false);
            playerStateButton.setEnabled(pause);
            playerStateButton.setImageResource(R.mipmap.ic_pause);
            if (pause) {
                playerStateButton.setEnabled(true);
                playerStateButton.setImageResource(R.mipmap.ic_pause);
            } else
                playerStateButton.setEnabled(false);
            playerStateButton.setEnabled(pause);
            playerStateButton.setImageResource(R.mipmap.ic_pause);
        }
    }

    /*
        This method is for pausing the music if the headset is disconnected
        while the song is playing.
     */

    private void interceptHeadsetDisconnection() {
        if (mediaPlayer != null) {
            setPlayerButton(true, false);
            if (mediaPlayer.isPlaying()) {
                mediaPlayer.pause();
            }
        }
    }

    private void updateTracks(List<Track> tracks) {
        allTracks.clear();
        allTracks.addAll(tracks);
        tracksAdapter.notifyDataSetChanged();
    }

    private void toggleSongState() {
        if (mediaPlayer.isPlaying()) {
            mediaPlayer.pause();
            playerStateButton.setImageResource(R.mipmap.ic_play);
        } else {
            mediaPlayer.start();
            toggleProgressBar();
            playerStateButton.setImageResource(R.mipmap.ic_pause);
        }
    }

    private void toggleProgressBar() {
        if (mediaPlayer.isPlaying()) {
            progressBar.setVisibility(View.INVISIBLE);
            playerStateButton.setVisibility(View.VISIBLE);
        } else {
            progressBar.setVisibility(View.VISIBLE);
            playerStateButton.setVisibility(View.INVISIBLE);
        }
    }

    /*
        This method is used if the user decides to look for a specific song.
        This searchFor method is used for the button functionality of the HomeActivity
        page which gets the "extra" user mood to display their desired song list from
        the clicked mood button of HomeActivity.
     */

    private void searchFor(final String query) {
        SoundCloud.getService().searchSongs(query, new Callback<List<Track>>() {

            @Override
            public void success(List<Track> tracks, Response response) {
                updateTracks(tracks);
            }

            @Override
            public void failure(RetrofitError error) {
            }
        });
    }

    /*
        This method will disable the search view and display the internet required message
        if the user is no connected to the internet.
     */

    private void disableSearchView(final android.widget.SearchView searchView) {
        SoundCloud.getService().searchSongs("", new Callback<List<Track>>() {

            @Override
            public void success(List<Track> tracks, Response response) {
                // This method is required, but no code is needed
            }

            @Override
            public void failure(RetrofitError error) {
                searchView.clearFocus();
                searchView.setVisibility(View.GONE);
                Toast.makeText(getApplication(), "Internet access required!", Toast.LENGTH_SHORT).show();
            }
        });
    }

    @Override
    public boolean onQueryTextSubmit(String query) {
        searchView.clearFocus();
        searchFor(query);
        return true;
    }

    @Override
    public boolean onQueryTextChange(String newText) {
        return false;
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();

        if (mediaPlayer != null) {
            if (mediaPlayer.isPlaying()) {
                mediaPlayer.stop();
            }
            mediaPlayer.release();
            mediaPlayer = null;
        }

        if(phoneStateListener != null) {
            telephonyManager.listen(phoneStateListener, PhoneStateListener.LISTEN_NONE);
        }
        unregisterReceiver(headsetReceiver);
    }

    /*
        This method is also used if the user decides to look for a specific song
        for the action bar menu.
     */

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_main, menu);
        searchView = (SearchView) menu.findItem(R.id.search_view).getActionView();

        String search = "Search song or artist";
        searchView.setQueryHint(search);
        searchView.setOnQueryTextListener(this);
        MenuItemCompat.setOnActionExpandListener(menu.findItem(R.id.search_view),
                new MenuItemCompat.OnActionExpandListener() {

                    @Override
                    public boolean onMenuItemActionExpand(MenuItem item) {

                        // If no internet connection
                        disableSearchView(searchView);

                        // If there is internet connection
                        previousTracks = new ArrayList<>(allTracks);
                        searchView.setIconified(false);
                        searchView.requestFocus();
                        return true;
                    }

                    @Override
                    public boolean onMenuItemActionCollapse(MenuItem item) {
                        updateTracks(previousTracks);
                        searchView.clearFocus();
                        return true;
                    }
                });
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        int id = item.getItemId();
        return id == R.id.search_view || super.onOptionsItemSelected(item);
    }

}
